{"/home/travis/build/npmtest/node-npmtest-pkgfiles/test.js":"/* istanbul instrument in package npmtest_pkgfiles */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pkgfiles/lib.npmtest_pkgfiles.js":"/* istanbul instrument in package npmtest_pkgfiles */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pkgfiles = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pkgfiles = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pkgfiles/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pkgfiles && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pkgfiles */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pkgfiles\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pkgfiles.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pkgfiles.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pkgfiles.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pkgfiles.__dirname + '/lib.npmtest_pkgfiles.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pkgfiles/node_modules/pkgfiles/index.js":"\"use strict\"\n\nvar fs = require('fs')\nvar path = require('path')\nvar resolve = require('pkgresolve')\nvar du = require('du')\nvar map = require('map-limit')\n\nmodule.exports = pkgFiles\n\nfunction pkgFiles(dir, fn) {\n  resolve('fstream-npm').fromGlobal('npm', function(err, fstreamPath) {\n    if (err) return fn(err)\n    var files = []\n    var packages = []\n    var nest = path.join(path.dirname(dir), 'package')\n    if (!fstreamPath) {\n      console.error('Warning: Could not find fstream-npm in global npm.')\n      console.error('You may not see matching behaviour.')\n    }\n    fstreamPath = fstreamPath || 'fstream-npm'\n\n    var fstream = require(fstreamPath)\n    fstream({ path: dir })\n    .on('entry', function(entry) {\n      files.push(entry.path)\n    })\n    .on('package', function(pkg) {\n      packages.push(pkg)\n    })\n    .on('error', function(err) {\n      fn(err)\n      fn = function() {}\n    })\n    .on('end', function() {\n\n      files = files.map(function(file) {\n        return path.join(dir, path.relative(nest, file))\n      })\n\n      map(files, Infinity, function(file, next) {\n        fs.lstat(file, function(err, stat) {\n          var name = path.relative(dir, file)\n          if (err) {\n            if (err.code === 'ENOENT') return next(null, {\n              name: name,\n              size: 0,\n              diskSize: 0,\n              exists: false\n            })\n            return next(err)\n          }\n          return next(null, {\n            name: name,\n            size: stat.size,\n            diskSize: 512 * stat.blocks,\n            exists: true,\n            isDirectory: false\n          })\n        })\n      }, function(err, entries) {\n        if (err) return fn(err)\n        var dirNames = entries\n        .reduce(function(dirNames, entry) {\n          return dirNames.concat(getAncestors(entry.name))\n        }, [])\n        .filter(Boolean)\n        .filter(unique)\n\n        var dirEntries = dirNames.map(function(dirName) {\n          return {\n            name: dirName,\n            size: 0,\n            diskSize: 0,\n            exists: true,\n            children: [],\n            isDirectory: true\n          }\n        })\n\n        dirEntries.forEach(function(dirEntry) {\n          dirEntry.children = dirEntry.children\n          .concat(entries.filter(function(entry) {\n            return (\n              dirEntry.name !== entry.name &&\n              !path.relative(dirEntry.name, path.dirname(entry.name))\n            )\n          }))\n        })\n\n        dirEntries.forEach(function(dirEntry) {\n          dirEntry.children = dirEntry.children\n          .concat(dirEntries.filter(function(entry) {\n            return (\n              dirEntry.name !== entry.name &&\n              !path.relative(dirEntry.name, path.dirname(entry.name))\n            )\n          }))\n        })\n\n        dirEntries.forEach(function(dirEntry) {\n          dirEntry.children = dirEntry.children.filter(unique)\n        })\n        var rootDir = dirEntries.filter(function(dirEntry) {\n          return dirEntry.name === '.'\n        }).pop()\n        getDirSize(rootDir)\n        return fn(null, entries.concat(dirEntries), packages)\n      })\n    })\n  })\n}\n\nfunction getDirSize(dirEntry) {\n  return dirEntry.children.reduce(function(dirEntry, entry) {\n    if (entry.isDirectory) {\n      entry = getDirSize(entry)\n    }\n    dirEntry.size += entry.size\n    dirEntry.diskSize += entry.diskSize\n    return dirEntry\n  }, dirEntry)\n  dirEntry.children = []\n  return dirEntry\n}\n\npkgFiles.summary = function summary(dir, done) {\n  var fn = function once(err, result) {\n    done(err, result)\n    fn = function() {}\n  }\n\n  var result = {\n    packages: [],\n    entries: [],\n    sizeWithDependencies: 0,\n    diskSizeWithDependencies: 0,\n    publishSize: 0,\n    publishDiskSize: 0\n  }\n\n  var pending = 2\n\n  pkgFiles(dir, function(err, entries, packages) {\n    if (err) return fn(err)\n    result.packages = packages\n    var files = entries.filter(function(entry) {\n      return !entry.isDirectory\n    })\n    result.publishSize = files.reduce(function(t, entry) {\n      return t + (entry.size || 0)\n    }, 0)\n    result.publishDiskSize = files.reduce(function(t, entry) {\n      return t + (entry.diskSize || 0)\n    }, 0)\n    result.entries = entries || []\n    if (!--pending) return fn(null, result)\n  })\n\n  duSizes(dir, function(err, dir) {\n    if (err) return fn(err)\n    result.diskSizeWithDependencies = dir.diskSize\n    result.sizeWithDependencies = dir.size\n    if (!--pending) return fn(null, result)\n  })\n}\n\nfunction duSizes(dir, fn) {\n  var result = {dir: dir}\n  var pending = 2\n  du(dir, {disk: true}, function(err, diskSize) {\n    if (err) return fn(err)\n    result.diskSize = diskSize || 0\n    if (!--pending) return fn(null, result)\n  })\n\n  du(dir, function(err, size) {\n    if (err) return fn(err)\n    result.size = size || 0\n    if (!--pending) return fn(null, result)\n  })\n}\n\nfunction getAncestors(dirName) {\n  var dirNames = []\n  dirName = path.dirname(dirName)\n  while (dirName && dirName !== '/' && dirName !== '.') {\n    dirNames.push(dirName)\n    dirName = path.dirname(dirName)\n  }\n  if (dirName === '.') dirNames.push(dirName)\n  return dirNames\n}\n\nfunction unique(item, index, arr) {\n  return index === arr.lastIndexOf(item)\n}\n\nfunction dirContains(parent, child) {\n  return parent !== child && path.relative(parent, child).slice(0, 2) !== '..'\n}\n","/home/travis/build/npmtest/node-npmtest-pkgfiles/node_modules/pkgfiles/bin/pkgfiles.js":"#!/usr/bin/env node\n\n\"use strict\"\n\nvar pkgFiles = require('../')\nvar path = require('path')\nvar minimist = require('minimist')\nvar columnify = require('columnify')\nvar bytes = require('pretty-bytes')\n\nvar dirHeader = {\n  name: 'DIR',\n  size: 'SIZE',\n  percent: '%',\n  diskSize: 'DISK SIZE',\n  diskSizePercent: 'DISK SIZE %'\n}\n\nvar fileHeader = {\n  name: 'PATH',\n  size: 'SIZE',\n  percent: '%',\n  diskSize: 'DISK SIZE',\n  diskSizePercent: 'DISK SIZE %'\n}\n\nvar argv = minimist(process.argv.slice(2), {\n  alias: {\n    'd': 'dirs',\n    'f': 'files'\n  },\n  default: {\n    files: false,\n    dirs: false\n  },\n  boolean: ['dirs', 'files']\n})\n\nvar dir = argv._[0] || process.cwd()\n\nif (argv.version) {\n  console.info(require('../package.json').version)\n  process.exit()\n}\n\nif (argv.help) {\n  usage()\n  process.exit(1)\n}\n\nfunction usage() {\n  console.error('')\n  console.error('Usage: pkgfiles [--sort=size|name|pkgfiles] [--disk] [--json] [-f, --only-files | -d, --only-dirs] [dir]')\n  console.error('')\n  console.error('  pkgfiles                    # List all files which would be published in current directory.')\n  console.error('  pkgfiles ./mypkg            # List all files which would be published in `./mypkg`.')\n  console.error('  pkgfiles --version          # Show version')\n  console.error('  pkgfiles --json             # Render JSON output')\n  console.error('  pkgfiles --sort=size        # Sort files by size [default]')\n  console.error('  pkgfiles --sort=name        # Sort files by name')\n  console.error('  pkgfiles --disk             # Include disk sizes in result')\n  console.error('  pkgfiles -f, --files        # Only list files')\n  console.error('  pkgfiles -d, --dirs         # Only list directories')\n  console.error('')\n}\n\nargv.sort = argv.sort || 'size'\n\nif (!argv['files'] && !argv['dirs']) {\n  argv.dirs =  true\n  argv.files = true\n}\n\npkgFiles.summary(dir, function(err, result) {\n  console.error()\n  if (err) return error(err)\n\n  var entries = result.entries\n  var files = entries.filter(function(e) {\n    return !e.isDirectory\n  })\n  var dirs = entries.filter(function(e) {\n    return e.isDirectory\n  })\n\n  if (!argv['dirs']) entries = files\n  else if (!argv['files']) entries = dirs\n  else entries = files.concat(dirs)\n\n  entries = result.entries = entries.sort(sortBy(argv.sort))\n\n  if (argv.json) {\n    return console.info(JSON.stringify(result, null, 2))\n  }\n\n  var summary = [\n    {\n      key: 'total',\n      title: 'Number of Files',\n      value: files.length\n    },\n    {\n      key: 'total',\n      title: 'Number of Directories',\n      value: dirs.length\n    },\n    {\n      key: 'publishSize',\n      title: 'Publishable Size',\n      value: \"~\" + bytes(result.publishSize)\n    },\n    {\n      key: 'publishDiskSize',\n      title: 'Publishable Size on Disk',\n      value: \"~\" + bytes(result.publishDiskSize)\n    },\n    {\n      key: 'sizeWithDependencies',\n      title: 'Size with Dependencies',\n      value: \"~\" + bytes(result.sizeWithDependencies)\n    },\n    {\n      key: 'diskSizeWithDependencies',\n      title: 'Size on Disk with Dependencies',\n      value: \"~\" + bytes(result.diskSizeWithDependencies)\n    }\n  ].reverse()\n\n  entries = entries.map(function(entry) {\n    entry.name = path.relative(dir, entry.name)\n    if (!entry.exists) {\n      entry.percent = 0\n      entry.percentDisk = 0\n      entry.size = 0\n      entry.diskSize = 0\n      return entry\n    }\n\n    if (entry.isDirectory) entry.name += '/'\n    if (entry.name === '/') entry.name = '.'\n\n    return entry\n  })\n  .sort(sortBy(argv.sort))\n  .map(function(entry) {\n    entry.percent = percent(entry.size/result.publishSize)\n    entry.percentDisk = percent(entry.diskSize/result.publishDiskSize)\n    if (typeof entry.size === 'number') entry.size = bytes(entry.size)\n    if (typeof entry.diskSize === 'number') entry.diskSize = bytes(entry.diskSize)\n    return entry\n  })\n\n  var columns = ['name', 'size', 'percent',]\n  if (argv.disk) {\n    columns.push('diskSize', 'percentDisk')\n  } else {\n    summary = summary.filter(function(item) {\n      return !(/Disk/.test(item.key))\n    })\n  }\n\n  var fileRows = entries.filter(function(item) {return !item.isDirectory})\n  var dirRows = entries.filter(function(item) {return item.isDirectory})\n\n  var rows = []\n  if (argv.files) rows = rows.concat(fileHeader, fileRows)\n  if (argv.files && argv.dirs) rows = rows.concat({})\n  if (argv.dirs) rows = rows.concat(dirHeader, dirRows)\n\n  console.info(columnify(rows, {columnSplitter: '  ', columns: columns, showHeaders: false}))\n  console.info('\\nPKGFILES SUMMARY')\n  console.info(columnify(summary, {columnSplitter: '  ', columns: ['title', 'value'], showHeaders: false}))\n})\n\nfunction percent(amount) {\n  return (Math.round(amount * 100)) + '%'\n}\n\nfunction error(err) {\n  if (err) {\n    console.error(err.message)\n    console.trace()\n    process.exit(1)\n  }\n}\n\n\nfunction sortBy(key) {\n  return function(a, b) {\n    if (typeof b[key] === 'string') {\n      return a[key].localeCompare(b[key])\n    } else {\n      return a[key] - b[key]\n    }\n  }\n}\n"}